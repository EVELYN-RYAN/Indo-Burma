@page "/admin/orders"

@inherits OwningComponentBase<IOrderRepository>

@*These sets fill in the table with the prelabled data. They call async tasks to update quickly*@
<OrderTable TableTitle="Unfulfilled Orders" Orders="UnfulfilledOrders"
               ButtonIcon="https://img.icons8.com/external-outline-icons-pause-08/48/000000/external-delivering-lined-shipping-outline-icons-pause-08.png"
OrderSelected="FulfillOrder" IconHeader="Shipped"></OrderTable>

<OrderTable TableTitle="Fulfilled Orders" Orders="FulfilledOrders"
               ButtonIcon="https://img.icons8.com/android/24/7C0D0E/undo.png" OrderSelected="ResetOrder" IconHeader="Undo"></OrderTable>

<button class="btn btn-info" @onclick="@(x=> UpdateData())">Refresh Data</button>

@code{
    // Declaring variables needed to calssify data on the page.
    public IOrderRepository repo => Service;

    public IEnumerable<Order> AllOrders { get; set; }
    public IEnumerable<Order> UnfulfilledOrders { get; set; }
    public IEnumerable<Order> FulfilledOrders { get; set; }

    // When the page is synced this method will automatically update and save the data
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }
    // and async tasks happens when it can. This is all redered on the client side
    public async Task UpdateData()
    {
        AllOrders = await repo.Orders.ToListAsync();
        UnfulfilledOrders = AllOrders.Where(x => !x.OrderFulfilled);
        FulfilledOrders = AllOrders.Where(x => x.OrderFulfilled);
    }
    public void FulfillOrder(int id) => UpdateOrder(id, true);
    public void ResetOrder(int id) => UpdateOrder(id, false);
    private void UpdateOrder(int id, bool fulfilled)
    {
        Order d = repo.Orders.FirstOrDefault(x => x.OrderNumber == id);
        d.OrderFulfilled = fulfilled;
        repo.SaveOrder(d);
    }
}